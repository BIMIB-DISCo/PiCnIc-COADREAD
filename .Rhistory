library(devtools)
document()
setwd('/Volumes/DATA/Work/Software/Github/PiCnIc-COADREAD')
as.kfold.eloss(MSS.models)
setwd('/Volumes/DATA/Work/Software/Github/TRONCO')
library(devtools)
document()
setwd('/Volumes/DATA/Work/Software/Github/PiCnIc-COADREAD')
as.kfold.eloss(MSS.models)
setwd('/Volumes/DATA/Work/Software/Github/TRONCO')
library(devtools)
document()
setwd('/Volumes/DATA/Work/Software/Github/PiCnIc-COADREAD')
as.kfold.eloss(MSS.models)
MSS.models$kfold
setwd('/Volumes/DATA/Work/Software/Github/TRONCO')
library(devtools)
document()
setwd('/Volumes/DATA/Work/Software/Github/PiCnIc-COADREAD')
as.kfold.eloss(MSS.models)
setwd('/Volumes/DATA/Work/Software/Github/TRONCO')
library(devtools)
document()
setwd('/Volumes/DATA/Work/Software/Github/PiCnIc-COADREAD')
as.kfold.eloss(MSS.models)
setwd('/Volumes/DATA/Work/Software/Github/TRONCO')
library(devtools)
document()
setwd('/Volumes/DATA/Work/Software/Github/PiCnIc-COADREAD')
as.kfold.eloss(MSS.models)
setwd('/Volumes/DATA/Work/Software/Github/TRONCO')
library(devtools)
document()
setwd('/Volumes/DATA/Work/Software/Github/PiCnIc-COADREAD')
as.kfold.eloss(MSS.models)
setwd('/Volumes/DATA/Work/Software/Github/TRONCO')
library(devtools)
document()
setwd('/Volumes/DATA/Work/Software/Github/PiCnIc-COADREAD')
as.kfold.eloss(MSS.models)
as.kfold.eloss(MSS.models)
as.bootstrap.scores(MSS.models)
setwd('/Volumes/DATA/Work/Software/Github/TRONCO')
library(devtools)
document()
setwd('/Volumes/DATA/Work/Software/Github/PiCnIc-COADREAD')
as.bootstrap.scores(MSS.models)
as.kfold.eloss(MSS.models)
setwd('/Volumes/DATA/Work/Software/Github/TRONCO')
library(devtools)
document()
setwd('/Volumes/DATA/Work/Software/Github/PiCnIc-COADREAD')
as.kfold.eloss(MSS.models)
setwd('/Volumes/DATA/Work/Software/Github/TRONCO')
library(devtools)
document()
setwd('/Volumes/DATA/Work/Software/Github/PiCnIc-COADREAD')
as.kfold.eloss(MSS.models)
setwd('/Volumes/DATA/Work/Software/Github/TRONCO')
library(devtools)
document()
setwd('/Volumes/DATA/Work/Software/Github/PiCnIc-COADREAD')
as.kfold.eloss(MSS.models)
setwd('/Volumes/DATA/Work/Software/Github/TRONCO')
library(devtools)
document()
setwd('/Volumes/DATA/Work/Software/Github/PiCnIc-COADREAD')
as.kfold.eloss(MSS.models)
setwd('/Volumes/DATA/Work/Software/Github/TRONCO')
library(devtools)
document()
setwd('/Volumes/DATA/Work/Software/Github/PiCnIc-COADREAD')
as.kfold.eloss(MSS.models)
setwd('/Volumes/DATA/Work/Software/Github/TRONCO')
library(devtools)
document()
setwd('/Volumes/DATA/Work/Software/Github/PiCnIc-COADREAD')
as.kfold.eloss(MSS.models)
setwd('/Volumes/DATA/Work/Software/Github/TRONCO')
library(devtools)
document()
setwd('/Volumes/DATA/Work/Software/Github/PiCnIc-COADREAD')
as.kfold.eloss(MSS.models)
setwd('/Volumes/DATA/Work/Software/Github/TRONCO')
library(devtools)
document()
setwd('/Volumes/DATA/Work/Software/Github/PiCnIc-COADREAD')
as.kfold.eloss(MSS.models)
setwd('/Volumes/DATA/Work/Software/Github/TRONCO')
library(devtools)
document()
setwd('/Volumes/DATA/Work/Software/Github/PiCnIc-COADREAD')
as.kfold.eloss(MSS.models)
setwd('/Volumes/DATA/Work/Software/Github/TRONCO')
library(devtools)
document()
setwd('/Volumes/DATA/Work/Software/Github/PiCnIc-COADREAD')
as.kfold.eloss(MSS.models)
setwd('/Volumes/DATA/Work/Software/Github/TRONCO')
library(devtools)
document()
setwd('/Volumes/DATA/Work/Software/Github/PiCnIc-COADREAD')
as.kfold.eloss(MSS.models)
setwd('/Volumes/DATA/Work/Software/Github/TRONCO')
library(devtools)
document()
setwd('/Volumes/DATA/Work/Software/Github/PiCnIc-COADREAD')
as.kfold.eloss(MSS.models)
MSS.models = tronco.kfold.eloss(MSS.models)
as.kfold.eloss(MSS.models)
MSS.models = tronco.kfold.eloss(MSS.models)
setwd('/Volumes/DATA/Work/Software/Github/TRONCO')
library(devtools)
document()
setwd('/Volumes/DATA/Work/Software/Github/PiCnIc-COADREAD')
as.kfold.eloss(MSS.models)
setwd('/Volumes/DATA/Work/Software/Github/TRONCO')
library(devtools)
document()
setwd('/Volumes/DATA/Work/Software/Github/PiCnIc-COADREAD')
as.kfold.eloss(MSS.models)
setwd('/Volumes/DATA/Work/Software/Github/TRONCO')
library(devtools)
document()
setwd('/Volumes/DATA/Work/Software/Github/PiCnIc-COADREAD')
as.kfold.eloss(MSS.models)
setwd('/Volumes/DATA/Work/Software/Github/TRONCO')
library(devtools)
document()
setwd('/Volumes/DATA/Work/Software/Github/PiCnIc-COADREAD')
as.kfold.eloss(MSS.models)
setwd('/Volumes/DATA/Work/Software/Github/TRONCO')
library(devtools)
document()
setwd('/Volumes/DATA/Work/Software/Github/PiCnIc-COADREAD')
as.kfold.eloss(MSS.models)
setwd('/Volumes/DATA/Work/Software/Github/TRONCO')
library(devtools)
document()
setwd('/Volumes/DATA/Work/Software/Github/PiCnIc-COADREAD')
as.kfold.eloss(MSS.models)
as.kfold.eloss(MSS.models)
setwd('/Volumes/DATA/Work/Software/Github/TRONCO')
library(devtools)
document()
setwd('/Volumes/DATA/Work/Software/Github/PiCnIc-COADREAD')
as.kfold.eloss(MSS.models)
setwd('/Volumes/DATA/Work/Software/Github/TRONCO')
library(devtools)
document()
setwd('/Volumes/DATA/Work/Software/Github/PiCnIc-COADREAD')
as.kfold.eloss(MSS.models)
adj.matrix
setwd('/Volumes/DATA/Work/Software/Github/TRONCO')
library(devtools)
document()
setwd('/Volumes/DATA/Work/Software/Github/PiCnIc-COADREAD')
MSS.models = tronco.kfold.prederr(MSS.models)
setwd('/Volumes/DATA/Work/Software/Github/TRONCO')
library(devtools)
document()
setwd('/Volumes/DATA/Work/Software/Github/PiCnIc-COADREAD')
MSS.models = tronco.kfold.prederr(MSS.models)
is.events.list()
is.events.list
MSS.models = tronco.kfold.prederr(MSS.models)
setwd('/Volumes/DATA/Work/Software/Github/TRONCO')
library(devtools)
document()
setwd('/Volumes/DATA/Work/Software/Github/PiCnIc-COADREAD')
MSS.models = tronco.kfold.prederr(MSS.models)
setwd('/Volumes/DATA/Work/Software/Github/TRONCO')
library(devtools)
document()
setwd('/Volumes/DATA/Work/Software/Github/PiCnIc-COADREAD')
MSS.models = tronco.kfold.prederr(MSS.models)
as.bnlearn.network(MSS.models)
setwd('/Volumes/DATA/Work/Software/Github/TRONCO')
library(devtools)
document()
setwd('/Volumes/DATA/Work/Software/Github/PiCnIc-COADREAD')
setwd('/Volumes/DATA/Work/Software/Github/TRONCO')
library(devtools)
document()
setwd('/Volumes/DATA/Work/Software/Github/PiCnIc-COADREAD')
MSS.models = tronco.kfold.prederr(MSS.models)
setwd('/Volumes/DATA/Work/Software/Github/TRONCO')
library(devtools)
document()
setwd('/Volumes/DATA/Work/Software/Github/PiCnIc-COADREAD')
MSS.models = tronco.kfold.prederr(MSS.models)
setwd('/Volumes/DATA/Work/Software/Github/TRONCO')
library(devtools)
document()
setwd('/Volumes/DATA/Work/Software/Github/PiCnIc-COADREAD')
MSS.models = tronco.kfold.prederr(MSS.models)
MSS.models
MSS.models$confidence
setwd('/Volumes/DATA/Work/Software/Github/TRONCO')
library(devtools)
document()
setwd('/Volumes/DATA/Work/Software/Github/PiCnIc-COADREAD')
as.confidence(MSS, conf = 'sb')
as.confidence(MSS.models, conf = 'sb')
as.confidence(MSS.models, conf = 'eloss')
setwd('/Volumes/DATA/Work/Software/Github/TRONCO')
library(devtools)
document()
setwd('/Volumes/DATA/Work/Software/Github/PiCnIc-COADREAD')
as.confidence(MSS.models, conf = 'eloss')
as.confidence(MSS.models, conf = c('eloss', 'pb'))
as.confidence(MSS.models, conf = c('eloss', 'sb'))
MSS.models$kfold$bic
as.dataframe(MSS.models$kfold$bic$prederr)
as.data.frame(MSS.models$kfold$bic$prederr)
t(as.data.frame(MSS.models$kfold$bic$prederr))
setwd('/Volumes/DATA/Work/Software/Github/TRONCO')
library(devtools)
document()
setwd('/Volumes/DATA/Work/Software/Github/PiCnIc-COADREAD')
setwd('/Volumes/DATA/Work/Software/Github/TRONCO')
library(devtools)
document()
setwd('/Volumes/DATA/Work/Software/Github/PiCnIc-COADREAD')
setwd('/Volumes/DATA/Work/Software/Github/TRONCO')
library(devtools)
document()
setwd('/Volumes/DATA/Work/Software/Github/PiCnIc-COADREAD')
setwd('/Volumes/DATA/Work/Software/Github/TRONCO')
library(devtools)
document()
setwd('/Volumes/DATA/Work/Software/Github/PiCnIc-COADREAD')
as.kfold.prederr(MSS.models)
setwd('/Volumes/DATA/Work/Software/Github/TRONCO')
library(devtools)
document()
setwd('/Volumes/DATA/Work/Software/Github/PiCnIc-COADREAD')
as.kfold.prederr(MSS.models)
setwd('/Volumes/DATA/Work/Software/Github/TRONCO')
library(devtools)
document()
setwd('/Volumes/DATA/Work/Software/Github/PiCnIc-COADREAD')
as.kfold.prederr(MSS.models)
setwd('/Volumes/DATA/Work/Software/Github/TRONCO')
library(devtools)
document()
setwd('/Volumes/DATA/Work/Software/Github/PiCnIc-COADREAD')
as.kfold.prederr(MSS.models)
setwd('/Volumes/DATA/Work/Software/Github/TRONCO')
library(devtools)
document()
setwd('/Volumes/DATA/Work/Software/Github/PiCnIc-COADREAD')
as.kfold.prederr(MSS.models)
setwd('/Volumes/DATA/Work/Software/Github/TRONCO')
library(devtools)
document()
setwd('/Volumes/DATA/Work/Software/Github/PiCnIc-COADREAD')
as.kfold.prederr(MSS.models)
setwd('/Volumes/DATA/Work/Software/Github/TRONCO')
library(devtools)
document()
setwd('/Volumes/DATA/Work/Software/Github/PiCnIc-COADREAD')
setwd('/Volumes/DATA/Work/Software/Github/TRONCO')
library(devtools)
document()
setwd('/Volumes/DATA/Work/Software/Github/PiCnIc-COADREAD')
setwd('/Volumes/DATA/Work/Software/Github/TRONCO')
library(devtools)
document()
setwd('/Volumes/DATA/Work/Software/Github/PiCnIc-COADREAD')
as.kfold.prederr(MSS.models)
setwd('/Volumes/DATA/Work/Software/Github/TRONCO')
library(devtools)
document()
setwd('/Volumes/DATA/Work/Software/Github/PiCnIc-COADREAD')
setwd('/Volumes/DATA/Work/Software/Github/TRONCO')
library(devtools)
document()
setwd('/Volumes/DATA/Work/Software/Github/PiCnIc-COADREAD')
as.kfold.prederr(MSS.models)
install.packages('GenVisR')
install.packages("devtools")
source("http://bioconductor.org/biocLite.R")
biocLite(c("AnnotationDbi", "biomaRt", "Biostrings", "GenomicFeatures", "GenomicRanges", "Rsamtools"))
devtools::install_github("griffithlab/GenVisR")
library(GenVisR)
?waterfall
setwd('/Volumes/DATA/Work/Software/Github/TRONCO')
library(devtools)
document()
setwd('/Volumes/DATA/Work/Software/Github/PiCnIc-COADREAD')
MAF.dataframe = MAF = import.MAF(file = MAF.file, is.TCGA = TRUE, sep = ';', to.TRONCO = FALSE,
filter.fun = function(x){ return(x['Hugo_Symbol'] %in% pathway.genes) })
?waterfall
MAF.dataframe
nrow(MAF.dataframe)
waterfall(MAF.dataframe)
unique(MAF.dataframe$Variant_Classification)
waterfall(MAF.dataframe[which(MAF.dataframe$Variant_Classification != De_novo_Start_OutOfFrame),])
waterfall(MAF.dataframe[which(MAF.dataframe$Variant_Classification != 'De_novo_Start_OutOfFrame'),])
names(MAF.dataframe)
library(reshape2)
dev.new(noRStudioGD = TRUE)
waterfall(MAF.dataframe[which(MAF.dataframe$Variant_Classification != 'De_novo_Start_OutOfFrame'),]
)
waterfall(MAF.dataframe[which(MAF.dataframe$Variant_Classification != 'De_novo_Start_OutOfFrame'),], mainGrid = T
)
waterfall(MAF.dataframe[which(MAF.dataframe$Variant_Classification != 'De_novo_Start_OutOfFrame'),],
mainGrid = T, mainXlabel = T
)
waterfall(MAF.dataframe[which(MAF.dataframe$Variant_Classification != 'De_novo_Start_OutOfFrame'),],
mainGrid = T, mainDropMut = T
)
waterfall(MAF.dataframe[which(MAF.dataframe$Variant_Classification != 'De_novo_Start_OutOfFrame'),],
mainGrid = T, mainDropMut = T, mainPalette = 'red'
)
brewer.pal.info
library(RColorBrewer)
brewer.pal.info
brewer.pal(Set1)
brewer.pal('Set1', n = 7)
colors = brewer.pal('Set1', n = 7)
MAF.dataframe = MAF.dataframe[which(MAF.dataframe$Variant_Classification != 'De_novo_Start_OutOfFrame'),] # Not supported mutation type
names(colors) = unique(MAF.dataframe$Variant_Classification)
mut.colors = brewer.pal('Set1', n = 7)
names(mut.colors) = unique(MAF.dataframe$Variant_Classification)
waterfall(MAF.dataframe,
mainGrid = T, mainDropMut = T, mainPalette = mut.colors
)
mut.colors = brewer.pal('Set2', n = 7)
names(mut.colors) = unique(MAF.dataframe$Variant_Classification)
waterfall(MAF.dataframe,
mainGrid = T, mainDropMut = T, mainPalette = mut.colors
)
mut.colors = brewer.pal('Accent', n = 7)
waterfall(MAF.dataframe,
mainGrid = T, mainDropMut = T, mainPalette = mut.colors
)
mut.colors = brewer.pal('Dark', n = 7)
mut.colors = brewer.pal('Dark2', n = 7)
names(mut.colors) = unique(MAF.dataframe$Variant_Classification)
waterfall(MAF.dataframe,
mainGrid = T, mainDropMut = T, mainPalette = mut.colors
)
library(reshape2)
head(clinical.data)
view(GISTIC)
view(MAF)
MAF
MAF = import.MAF(
file = MAF.file,
is.TCGA = TRUE,
sep = ';',
filter.fun = function(x){ return(x['Hugo_Symbol'] %in% pathway.genes) } # filter
)
as.genes(MAF)                     # List of genes
view(MAF)
view(GISTIC)
MSS.models
MSS.models$bootstrap
MSS.models
setwd('/Volumes/DATA/Work/Software/Github/TRONCO')
library(devtools)
document()
setwd('/Volumes/DATA/Work/Software/Github/PiCnIc-COADREAD')
as.genes(MAF)                     # List of genes
as.kfold.prederr(MSS.models)
setwd('/Volumes/DATA/Work/Software/Github/TRONCO')
library(devtools)
document()
setwd('/Volumes/DATA/Work/Software/Github/PiCnIc-COADREAD')
as.kfold.prederr(MSS.models)
setwd('/Volumes/DATA/Work/Software/Github/TRONCO')
library(devtools)
document()
setwd('/Volumes/DATA/Work/Software/Github/PiCnIc-COADREAD')
as.kfold.prederr(MSS.models)
setwd('/Volumes/DATA/Work/Software/Github/TRONCO')
library(devtools)
document()
setwd('/Volumes/DATA/Work/Software/Github/PiCnIc-COADREAD')
setwd('/Volumes/DATA/Work/Software/Github/TRONCO')
library(devtools)
document()
setwd('/Volumes/DATA/Work/Software/Github/PiCnIc-COADREAD')
as.kfold.prederr(MSS.models)
MSS.models$kfold
MSS.models$kfold[['aic']]
MSS.models$kfold[[c('aic', 'bic')]]
setwd('/Volumes/DATA/Work/Software/Github/TRONCO')
library(devtools)
document()
setwd('/Volumes/DATA/Work/Software/Github/PiCnIc-COADREAD')
as.kfold.prederr(MSS.models)
setwd('/Volumes/DATA/Work/Software/Github/TRONCO')
library(devtools)
document()
setwd('/Volumes/DATA/Work/Software/Github/PiCnIc-COADREAD')
as.kfold.prederr(MSS.models)
setwd('/Volumes/DATA/Work/Software/Github/TRONCO')
library(devtools)
document()
setwd('/Volumes/DATA/Work/Software/Github/PiCnIc-COADREAD')
as.kfold.prederr(MSS.models)
setwd('/Volumes/DATA/Work/Software/Github/TRONCO')
library(devtools)
document()
setwd('/Volumes/DATA/Work/Software/Github/PiCnIc-COADREAD')
as.kfold.prederr(MSS.models)
setwd('/Volumes/DATA/Work/Software/Github/TRONCO')
library(devtools)
document()
setwd('/Volumes/DATA/Work/Software/Github/PiCnIc-COADREAD')
as.kfold.prederr(MSS.models)
setwd('/Volumes/DATA/Work/Software/Github/TRONCO')
library(devtools)
document()
setwd('/Volumes/DATA/Work/Software/Github/PiCnIc-COADREAD')
setwd('/Volumes/DATA/Work/Software/Github/TRONCO')
library(devtools)
document()
setwd('/Volumes/DATA/Work/Software/Github/PiCnIc-COADREAD')
as.kfold.prederr(MSS.models)
setwd('/Volumes/DATA/Work/Software/Github/TRONCO')
library(devtools)
document()
setwd('/Volumes/DATA/Work/Software/Github/PiCnIc-COADREAD')
as.kfold.prederr(MSS.models)
MSS.models$kfold
MSS.models$kfold$bic
setwd('/Volumes/DATA/Work/Software/Github/TRONCO')
library(devtools)
document()
setwd('/Volumes/DATA/Work/Software/Github/PiCnIc-COADREAD')
MSS.models$kfold$bic
as.kfold.prederr(MSS.models)
setwd('/Volumes/DATA/Work/Software/Github/TRONCO')
library(devtools)
document()
setwd('/Volumes/DATA/Work/Software/Github/PiCnIc-COADREAD')
as.kfold.prederr(MSS.models)
setwd('/Volumes/DATA/Work/Software/Github/TRONCO')
library(devtools)
document()
setwd('/Volumes/DATA/Work/Software/Github/PiCnIc-COADREAD')
as.kfold.prederr(MSS.models)
as.kfold.prederr(MSS.models, events = as.events(MSS.models, 'KRAS'))
as.kfold.prederr(MSS.models, events = as.events(MSS.models, 'KRAS'), 'bic')
MSS.models
MSS.models$kfold$bic
MSS.models = tronco.kfold.prederr(MSS.models)
MSS.models$kfold$bic
MSS.models$kfold$aic
setwd('/Volumes/DATA/Work/Software/Github/TRONCO')
library(devtools)
document()
setwd('/Volumes/DATA/Work/Software/Github/PiCnIc-COADREAD')
as.kfold.prederr(MSS.models, events = as.events(MSS.models, 'KRAS'), 'bic')
setwd('/Volumes/DATA/Work/Software/Github/TRONCO')
library(devtools)
document()
setwd('/Volumes/DATA/Work/Software/Github/PiCnIc-COADREAD')
as.kfold.prederr(MSS.models, events = as.events(MSS.models, 'KRAS'), 'bic')
setwd('/Volumes/DATA/Work/Software/Github/TRONCO')
library(devtools)
document()
setwd('/Volumes/DATA/Work/Software/Github/PiCnIc-COADREAD')
as.kfold.prederr(MSS.models, events = as.events(MSS.models, 'KRAS'), 'bic')
setwd('/Volumes/DATA/Work/Software/Github/TRONCO')
library(devtools)
document()
setwd('/Volumes/DATA/Work/Software/Github/PiCnIc-COADREAD')
as.kfold.prederr(MSS.models, events = as.events(MSS.models, 'KRAS'), 'bic')
setwd('/Volumes/DATA/Work/Software/Github/TRONCO')
library(devtools)
document()
setwd('/Volumes/DATA/Work/Software/Github/PiCnIc-COADREAD')
setwd('/Volumes/DATA/Work/Software/Github/TRONCO')
library(devtools)
document()
setwd('/Volumes/DATA/Work/Software/Github/PiCnIc-COADREAD')
as.kfold.prederr(MSS.models, events = as.events(MSS.models, 'KRAS'), 'bic')
setwd('/Volumes/DATA/Work/Software/Github/TRONCO')
library(devtools)
document()
setwd('/Volumes/DATA/Work/Software/Github/PiCnIc-COADREAD')
as.kfold.prederr(MSS.models, events = as.events(MSS.models, 'KRAS'), 'bic')
setwd('/Volumes/DATA/Work/Software/Github/TRONCO')
library(devtools)
document()
setwd('/Volumes/DATA/Work/Software/Github/PiCnIc-COADREAD')
as.kfold.prederr(MSS.models, events = as.events(MSS.models, 'KRAS'), 'bic')
setwd('/Volumes/DATA/Work/Software/Github/TRONCO')
library(devtools)
document()
setwd('/Volumes/DATA/Work/Software/Github/PiCnIc-COADREAD')
as.kfold.prederr(MSS.models, events = as.events(MSS.models, 'KRAS'), 'bic')
as.kfold.prederr(MSS.models)
MSI.models
MSI.models = tronco.kfold.prederr(MSI.models)
as.kfold.eloss(MSS.models)
as.kfold.eloss(MSI.models)
MSI.models = tronco.kfold.eloss(MSI.models)
as.kfold.eloss(MSI.models)
MSS.models = tronco.kfold.prederr(MSS.models)
as.kfold.prederr(MSS.models)
as.kfold.prederr(MSI.models)
as.selective.advantage.relations(MSS.models)
as.selective.advantage.relations(MSS.models)$bic
as.kfold.prederr(MSS.models)$bic
as.selective.advantage.relations(MSS.models)$bic
as.kfold.prederr(MSS.models)$bic
